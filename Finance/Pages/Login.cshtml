@page
@model LoginModel
@{
    ViewData["Title"] = "Login";
}

@section Css {
    <style>
        body {
            height: 100vh;
        }
        a {
            text-decoration: none;
            color: unset;
        }
        a:hover {
            color: #00A8FF;
        }

        .register-link {
            color: rgb(99, 102, 241)
        }

        form {
            max-width: 700px;
        }
    </style>   
}

<div style="height: 100%;">
    <div class="row rounded overflow-hidden" style="background-color: #F3F6FD; height: 100%;">
        <div class="col-6" style="padding: 100px 100px">
            <div class="row mb-1">
                <h2 style="font-weight: 600;">Login</h2>
            </div>
            <div class="row mb-2">
                <p>Don't have an account? <a href="register" class="register-link">Register</a></p>
            </div>
            @* <div class="text-muted mb-5">
                <figure>
                  <blockquote class="blockquote">
                    <p>@Model.Quote.Message</p>
                  </blockquote>
                  <figcaption class="blockquote-footer text-end">
                    <cite title="Source Title">@Model.Quote.Author</cite>
                  </figcaption>
                </figure>
            </div> *@
            <form class="row" method="post">
                <div class="input-group mb-3">
                    <span class="input-group-text"><i class="fal fa-at" style="width: 20px;"></i></span>
                    <input asp-for="Email" class="form-control" placeholder="Email" />
                </div>
                <div class="input-group mb-4">
                    <span class="input-group-text"><i class="fal fa-unlock-alt" style="width: 20px;"></i></span>
                    <input asp-for="Password" type="password" class="form-control" placeholder="Password" />
                </div>

                @if (!ModelState.IsValid)
                {
                    var allErrors = ModelState.Values.SelectMany(v => v.Errors).ToList();
                    Log.Debug("Login input errors: {@Errors}", allErrors);
                    <div class="input-group">
                        <div asp-validation-summary="All" class="form-control alert alert-danger"></div>
                    </div>
                }

                <div class="d-flex justify-content-between mb-5">
                  <div style="color: #00A8FF">
                    <input asp-for="RememberMe" hidden />
                    <i class="fal fa-square" id="remember"></i>
                    Keep me sign in
                  </div>
                </div>

                <div class="d-flex mb-5">
                  <button class="flex-grow-1 btn btn-primary" type="submit">Login</button>
                </div>
            </form>
        </div>
        <div class="col-6 p-0 position-relative" style="background: radial-gradient(50% 50% at 50% 50%, rgb(18, 38, 71) 0%, rgb(9, 14, 35) 100%);">
            <div class="position-absolute d-flex justify-content-center align-items-center" style="inset: 0; padding: 20px">
                <div class="text-center" style="color: white">
                    <h1 style="font-weight: bold;">Finance</h1>
                    <h5>One of the world best app for tracking income and outcome changes! </h5>
                </div>
            </div>
        </div>
    </div>
</div>

@{
    var registerData = TempData["registerSuccess"] as Dictionary<string, string>;
}

@section Scripts {
    <script>
        const rmbMe = $q("#remember");
        rmbMe.addEventListener("click", () => {
            rmbMe.classList.toggle("fa-square");
            rmbMe.classList.toggle("fa-check-square");
            $q("#RememberMe").click();
        });

        @if (registerData != null)
        {
            <text>
                toast_success("Success", "@registerData["msg"]");

                connectWS(conn => {
                    conn.invoke("RegisteredAccount", "@registerData["email"]");
                });
            </text>
        }
    </script>
}